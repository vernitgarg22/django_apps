# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-08-03 22:10
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_path', models.CharField(db_index=True, max_length=256, unique=True, verbose_name='Path to image file')),
            ],
        ),
        migrations.CreateModel(
            name='ImageMetadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(verbose_name='Time when image was created')),
                ('latitude', models.FloatField(verbose_name='Image latitude')),
                ('longitude', models.FloatField(verbose_name='Image longitude')),
                ('altitude', models.FloatField(verbose_name='Image altitude')),
                ('note', models.CharField(blank=True, max_length=128, null=True, verbose_name='Image note (optional)')),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='photo_survey.Image')),
            ],
        ),
        migrations.CreateModel(
            name='ParcelMetadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parcel_id', models.CharField(db_index=True, max_length=32, unique=True, verbose_name='Parcel ID')),
                ('common_name', models.CharField(blank=True, max_length=128, null=True, verbose_name='Common name')),
                ('house_number', models.IntegerField(blank=True, null=True, verbose_name='House number')),
                ('street_name', models.CharField(blank=True, max_length=128, null=True, verbose_name='Street name')),
                ('street_type', models.CharField(blank=True, max_length=32, null=True, verbose_name='Street type')),
                ('zipcode', models.CharField(blank=True, max_length=16, null=True, verbose_name='zipcode')),
            ],
        ),
        migrations.CreateModel(
            name='PublicPropertyData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parcelno', models.CharField(db_index=True, max_length=32, verbose_name='Parcel ID')),
                ('propaddress', models.CharField(max_length=64, verbose_name='Address')),
                ('propzip', models.CharField(max_length=12, verbose_name='ZIP')),
                ('taxpayer1', models.CharField(max_length=64, verbose_name='Tax Payer 1')),
                ('taxpayer2', models.CharField(max_length=64, verbose_name='Tax Payer 2')),
                ('taxaddr', models.CharField(max_length=64, verbose_name='Tax Payer Address')),
                ('taxcity', models.CharField(max_length=32, verbose_name='Tax Payer City')),
                ('taxstate', models.CharField(max_length=2, verbose_name='Tax Payer State')),
                ('taxzip', models.CharField(max_length=32, verbose_name='Tax Payer ZIP')),
                ('project_co', models.CharField(max_length=32, verbose_name='Project Code')),
                ('ownership', models.CharField(max_length=64, verbose_name='Owner')),
            ],
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(db_index=True, max_length=64, verbose_name='User ID')),
                ('created_at', models.DateTimeField(default=None, null=True, verbose_name='Time when survey was made')),
                ('common_name', models.CharField(max_length=1024, verbose_name='Parcel common name')),
                ('note', models.CharField(max_length=1024, verbose_name='Note')),
                ('image_url', models.CharField(max_length=256, verbose_name='Image used for survey')),
                ('status', models.CharField(blank=True, db_index=True, max_length=16, verbose_name='Survey status')),
                ('parcel', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='photo_survey.ParcelMetadata')),
            ],
        ),
        migrations.CreateModel(
            name='SurveyAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=1024, verbose_name='Answer')),
                ('note', models.CharField(blank=True, max_length=1024, verbose_name='Note')),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='photo_survey.Survey')),
            ],
        ),
        migrations.CreateModel(
            name='SurveyQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_id', models.CharField(max_length=64, verbose_name='Question identifier')),
                ('question_number', models.PositiveIntegerField(verbose_name='Question number')),
                ('question_text', models.CharField(help_text='The actual human-readable question itself', max_length=256, verbose_name='Question')),
                ('valid_answers', models.CharField(help_text='Regex defining valid answers', max_length=256, verbose_name='Valid answers regex')),
                ('required_by', models.CharField(blank=True, default='', help_text="Question / Answer pair that makes answer required. 'n' makes answer optional. Default is required", max_length=64, verbose_name='Required by')),
                ('required_by_answer', models.CharField(blank=True, default='', help_text='Specific answer pattern that makes this required', max_length=64, verbose_name='Required by answer')),
                ('answer_trigger', models.CharField(blank=True, default='', help_text="Required action for a given answer. e.g., 'n'", max_length=16, verbose_name='Answer trigger')),
                ('answer_trigger_action', models.CharField(blank=True, default='', help_text="Action to take if a trigger goes off. e.g., 'stop'", max_length=16, verbose_name='Trigger action')),
                ('scoring_type', models.CharField(blank=True, default='', max_length=16, verbose_name='Way to score the answers for the question')),
            ],
        ),
        migrations.CreateModel(
            name='SurveyQuestionAvailAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(help_text='Answer value as stored in database', max_length=64, verbose_name='Answer Value')),
                ('text', models.CharField(help_text='Human-readable version of answer', max_length=128, verbose_name='Human-readable Answer')),
                ('weight', models.IntegerField(default=0, verbose_name='Answer Weight')),
                ('survey_question', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='photo_survey.SurveyQuestion')),
            ],
        ),
        migrations.CreateModel(
            name='SurveyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('survey_template_id', models.CharField(db_index=True, max_length=32, verbose_name='Survey name or ID')),
            ],
        ),
        migrations.AddField(
            model_name='surveyquestion',
            name='survey_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='photo_survey.SurveyType'),
        ),
        migrations.AddField(
            model_name='surveyanswer',
            name='survey_question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='photo_survey.SurveyQuestion'),
        ),
        migrations.AddField(
            model_name='survey',
            name='survey_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='photo_survey.SurveyType'),
        ),
        migrations.AddField(
            model_name='imagemetadata',
            name='parcel',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='photo_survey.ParcelMetadata'),
        ),
    ]
